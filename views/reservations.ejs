<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Gestion des Réservations</title>
    <link rel="stylesheet" href="/stylesheets/style.css" />
  </head>
  <body>
    <h1>Gestion des Réservations</h1>
    <a href="/dashboard" class="back-link">Retour au tableau de bord</a>

    <div id="message"></div>

    <h2>Créer une réservation</h2>
    <form id="createReservationForm">
      <label>
        Catway :
        <select name="catwayNumber" required>
          <option value="">--Choisir un catway--</option>
          <% if (catways && catways.length > 0) { %> <%
          catways.forEach(function(catway) { %>
          <option value="<%= catway.catwayNumber %>">
            Catway <%= catway.catwayNumber %> (<%= catway.catwayType %>)
          </option>
          <% }); %> <% } %>
        </select>
      </label>

      <label>
        Nom du client :
        <input type="text" name="clientName" required />
      </label>

      <label>
        Nom du bateau :
        <input type="text" name="boatName" required />
      </label>

      <label>
        Date début :
        <input type="date" name="startDate" required />
      </label>

      <label>
        Date fin :
        <input type="date" name="endDate" required />
      </label>

      <button class="btn-success" type="submit">Créer</button>
    </form>

    <h2>Liste des réservations</h2>
    <% if (reservations && reservations.length > 0) { %>
    <table>
      <thead>
        <tr>
          <th>Catway</th>
          <th>Client</th>
          <th>Bateau</th>
          <th>Début</th>
          <th>Fin</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% reservations.forEach(function(r) { %>
        <tr id="reservation-<%= r._id %>">
          <td><%= r.catwayNumber %></td>
          <td><%= r.clientName %></td>
          <td><%= r.boatName %></td>
          <td><%= new Date(r.startDate).toLocaleDateString() %></td>
          <td><%= new Date(r.endDate).toLocaleDateString() %></td>
          <td>
            <button class="btn-warning" onclick="showEditForm('<%= r._id %>')">
              Modifier
            </button>
            <button
              class="btn-danger"
              onclick="deleteReservation('<%= r._id %>', '<%= r.catwayNumber %>')"
            >
              Supprimer
            </button>
          </td>
        </tr>
        <% }); %>
      </tbody>
    </table>
    <% } else { %>
    <p>Aucune réservation trouvée.</p>
    <% } %>

    <div id="editSection" class="hidden">
      <h2>Modifier une réservation</h2>
      <form id="editReservationForm">
        <input type="hidden" name="id" />
        <input type="hidden" name="originalCatwayNumber" />

        <label>
          Catway :
          <select name="catwayNumber" required>
            <option value="">--Choisir un catway--</option>
            <% if (catways && catways.length > 0) { %> <%
            catways.forEach(function(catway) { %>
            <option value="<%= catway.catwayNumber %>">
              Catway <%= catway.catwayNumber %> (<%= catway.catwayType %>)
            </option>
            <% }); %> <% } %>
          </select>
        </label>

        <label>
          Nom du client :
          <input type="text" name="clientName" required />
        </label>

        <label>
          Nom du bateau :
          <input type="text" name="boatName" required />
        </label>

        <label>
          Date début :
          <input type="date" name="startDate" required />
        </label>

        <label>
          Date fin :
          <input type="date" name="endDate" required />
        </label>

        <button class="btn-warning" type="submit">Modifier</button>
        <button class="btn-danger" type="button" onclick="hideEditForm()">
          Annuler
        </button>
      </form>
    </div>

    <script>
      const reservations = <%- JSON.stringify(reservations || []) %>;

      function showMessage(message, type) {
        const messageDiv = document.getElementById('message');
        messageDiv.innerHTML = '<div class="' + type + '">' + message + '</div>';
      }

      document.getElementById('createReservationForm').addEventListener('submit', async function (e) {
        e.preventDefault();
        const form = e.target;
        const catwayNumber = form.catwayNumber.value;

        const data = {
          clientName: form.clientName.value,
          boatName: form.boatName.value,
          startDate: form.startDate.value,
          endDate: form.endDate.value,
        };

        try {
          const res = await fetch('/reservations/' + catwayNumber + '/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
          });

          const result = await res.json();
          if (result.success) {
            showMessage('Réservation créée avec succès !', 'success');
            form.reset();
            setTimeout(function () {
              location.reload();
            }, 1000);
          } else {
            showMessage('Erreur : ' + result.error, 'error');
          }
        } catch (error) {
          showMessage('Erreur : ' + error.message, 'error');
        }
      });

      async function deleteReservation(reservationId, catwayNumber) {
        if (!confirm('Voulez-vous supprimer cette réservation ?')) return;

        try {
          const res = await fetch('/reservations/' + catwayNumber + '/' + reservationId + '/delete', {
            method: 'DELETE',
          });

          const result = await res.json();
          if (result.success) {
            showMessage('Réservation supprimée avec succès !', 'success');
            setTimeout(function () {
              location.reload();
            }, 1000);
          } else {
            showMessage('Erreur : ' + result.error, 'error');
          }
        } catch (error) {
          showMessage('Erreur : ' + error.message, 'error');
        }
      }

      function showEditForm(reservationId) {
        const reservation = reservations.find(function (r) {
          return r._id === reservationId;
        });
        if (!reservation) {
          showMessage('Réservation non trouvée', 'error');
          return;
        }

        const form = document.getElementById('editReservationForm');
        const section = document.getElementById('editSection');

        section.classList.remove('hidden');

        form.id.value = reservation._id;
        form.originalCatwayNumber.value = reservation.catwayNumber;
        form.catwayNumber.value = reservation.catwayNumber;
        form.clientName.value = reservation.clientName;
        form.boatName.value = reservation.boatName;
        form.startDate.value = new Date(reservation.startDate).toISOString().slice(0, 10);
        form.endDate.value = new Date(reservation.endDate).toISOString().slice(0, 10);
      }

      function hideEditForm() {
        document.getElementById('editSection').classList.add('hidden');
      }

      document.getElementById('editReservationForm').addEventListener('submit', async function (e) {
        e.preventDefault();
        const form = e.target;
        const reservationId = form.id.value;
        const catwayNumber = form.originalCatwayNumber.value;

        // Conversion des dates en format ISO pour éviter les problèmes de timezone
        const startDate = new Date(form.startDate.value + 'T00:00:00.000Z');
        const endDate = new Date(form.endDate.value + 'T23:59:59.999Z');

        // Vérification côté client avant envoi
        if (endDate <= startDate) {
          showMessage('Erreur : La date de fin doit être postérieure à la date de début', 'error');
          return;
        }

        const data = {
          catwayNumber: Number(form.catwayNumber.value),
          clientName: form.clientName.value,
          boatName: form.boatName.value,
          startDate: startDate.toISOString(),
          endDate: endDate.toISOString(),
        };

        // Log de débogage (à supprimer une fois que ça marche)
        console.log('Dates envoyées:', {
          startDate: data.startDate,
          endDate: data.endDate,
          startOriginal: form.startDate.value,
          endOriginal: form.endDate.value
        });

        try {
          // Utilisation de la route EJS qui fonctionne comme création/suppression
          const res = await fetch('/reservations/' + catwayNumber + '/' + reservationId + '/update', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
          });

          const result = await res.json();
          if (result.success) {
            showMessage('Réservation modifiée avec succès !', 'success');
            hideEditForm();
            setTimeout(function () {
              location.reload();
            }, 1000);
          } else {
            showMessage('Erreur : ' + result.error, 'error');
          }
        } catch (error) {
          showMessage('Erreur : ' + error.message, 'error');
        }
      });
    </script>
  </body>
</html>
